<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2022/06/03/ThreadLocal/"/>
    <url>/2022/06/03/ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么ThreadLocal可以避免线程冲突？"><a href="#为什么ThreadLocal可以避免线程冲突？" class="headerlink" title="为什么ThreadLocal可以避免线程冲突？"></a>为什么ThreadLocal可以避免线程冲突？</h3><ul><li>ThreadLocal类里面有一个内部类ThreadLocalMap</li><li>ThreadLocalMap类里面也存在一个内部类Entry，同时Entry继承WeakReference，弱引用对象每次GC时会被回收。Entry.value实际上是我们存在ThreadLocal里面的值</li><li>Thread类里面有一个成员变量ThreadLocal.ThreadLocalMap threadLocals</li><li>ThreadLocalMap类里面有一个成员变量private Entry[] table数组</li><li>每个线程都有自己的ThreadLocalMap对象，我们调用get,set,remove实际上是在操作当前线程的ThreadLocalMap.table数组（Thread t &#x3D; Thread.currentThread();ThreadLocalMap map &#x3D; getMap(t)），线程之间自然不会发生并发冲突</li><li>ThreadLocalMap里面的key是ThreadLocal对象</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala">static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalMap</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The entries in this hash map extend WeakReference, using</span><br><span class="hljs-comment">         * its main ref field as the key (which is always a</span><br><span class="hljs-comment">         * ThreadLocal object).  Note that null keys (i.e. entry.get()</span><br><span class="hljs-comment">         * == null) mean that the key is no longer referenced, so the</span><br><span class="hljs-comment">         * entry can be expunged from table.  Such entries are referred to</span><br><span class="hljs-comment">         * as &quot;stale entries&quot; in the code that follows.</span><br><span class="hljs-comment">         */</span><br>        static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</span> </span>&#123;<br>            <span class="hljs-comment">/** The value associated with this ThreadLocal. */</span><br>            <span class="hljs-type">Object</span> value;<br><br>            <span class="hljs-type">Entry</span>(<span class="hljs-type">ThreadLocal</span>&lt;?&gt; k, <span class="hljs-type">Object</span> v) &#123;<br>                <span class="hljs-keyword">super</span>(k);<br>                value = v;<br>            &#125;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>get方法实际是取出ThreadLocalMap里面table数组里面存放的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>       <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>           ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> map.getEntry(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>               <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (T)e.value;<br>               <span class="hljs-keyword">return</span> result;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> setInitialValue();<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> <span class="hljs-built_in">set</span>(T value) &#123;<br>       <span class="hljs-keyword">Thread</span> t = <span class="hljs-keyword">Thread</span>.currentThread();<br>       ThreadLocalMap <span class="hljs-built_in">map</span> = getMap(t);<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span> != <span class="hljs-built_in">null</span>) &#123;<br>           <span class="hljs-built_in">map</span>.<span class="hljs-built_in">set</span>(this, value);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           createMap(t, value);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span>()</span> &#123;<br>        ThreadLocalMap m = getMap(Thread.currentThread());<br>        <span class="hljs-keyword">if</span> (m != <span class="hljs-literal">null</span>) &#123;<br>            m.<span class="hljs-keyword">remove</span>(<span class="hljs-keyword">this</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S&gt; <span class="hljs-title class_">ThreadLocal</span>&lt;S&gt; <span class="hljs-title function_">withInitial</span>(<span class="hljs-params">Supplier&lt;? <span class="hljs-keyword">extends</span> S&gt; supplier</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuppliedThreadLocal</span>&lt;&gt;(supplier);<br>&#125;<br></code></pre></td></tr></table></figure><p>getMap获取ThreadLocalMap对象</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-title class_">ThreadLocalMap</span> <span class="hljs-title function_">getMap</span>(<span class="hljs-params">Thread</span> <span class="hljs-params">t</span>) &#123;<br><span class="hljs-comment">//ThreadLocal.ThreadLocalMap threadLocals = null,</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">t</span>.<span class="hljs-property">threadLocals</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>setInitialValue()方法,这时的value实际上是null。如果为空就创建一个新的ThreadLocalMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> T <span class="hljs-title function_">setInitialValue</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">T</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> initialValue();<br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>       <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br>       <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>           map.set(<span class="hljs-built_in">this</span>, value);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           createMap(t, value);<br>       &#125;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> TerminatingThreadLocal) &#123;<br>           TerminatingThreadLocal.register((TerminatingThreadLocal&lt;?&gt;) <span class="hljs-built_in">this</span>);<br>       &#125;<br>       <span class="hljs-keyword">return</span> value;<br>   &#125;<br><br><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>创建ThreadLocalMap</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void create<span class="hljs-constructor">Map(Thread <span class="hljs-params">t</span>, T <span class="hljs-params">firstValue</span>)</span> &#123;<br>       t.threadLocals = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ThreadLocalMap(<span class="hljs-params">this</span>, <span class="hljs-params">firstValue</span>)</span>;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>ThreadLocalMap构造方法，初始化数组，计算角标</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">ThreadLocalMap(ThreadLocal&lt;?&gt; <span class="hljs-params">firstKey</span>, Object <span class="hljs-params">firstValue</span>)</span> &#123;<br>table = <span class="hljs-keyword">new</span> Entry<span class="hljs-literal">[INITIAL<span class="hljs-identifier">_CAPACITY</span>]</span>;<br><span class="hljs-built_in">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="hljs-number">1</span>);<br>table<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Entry(<span class="hljs-params">firstKey</span>, <span class="hljs-params">firstValue</span>)</span>;<br>size = <span class="hljs-number">1</span>;<br>set<span class="hljs-constructor">Threshold(INITIAL_CAPACITY)</span>;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>set方法，key是ThreadLocal,实际上是将值存放在ThreadLocalMap里面的成员变量private Entry[] table数组里面，角标计算方法是为 key.threadLocalHashCode &amp; (len-1);</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Set the value associated with key.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param key the thread local object</span><br><span class="hljs-comment"> * @param value the value to be set</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-built_in">set</span>(ThreadLocal&lt;?&gt; <span class="hljs-built_in">key</span>, <span class="hljs-built_in">Object</span> value) &#123;<br><br><span class="hljs-comment">// We don&#x27;t use a fast path as with get() because it is at</span><br><span class="hljs-comment">// least as common to use set() to create new entries as</span><br><span class="hljs-comment">// it is to replace existing ones, in which case, a fast</span><br><span class="hljs-comment">// path would fail more often than not.</span><br><br>Entry[] tab = table;<br><span class="hljs-type">int</span> len = tab.<span class="hljs-property">length</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-built_in">key</span>.<span class="hljs-property">threadLocalHashCode</span> &amp; (len<span class="hljs-number">-1</span>);<br><br><span class="hljs-keyword">for</span> (Entry e = tab[i];<br> e != <span class="hljs-literal">null</span>;<br> e = tab[i = <span class="hljs-title function_">nextIndex</span>(i, len)]) &#123;<br>ThreadLocal&lt;?&gt; k = e.<span class="hljs-property">get</span>();<br><br><span class="hljs-keyword">if</span> (k == <span class="hljs-built_in">key</span>) &#123;<br>e.<span class="hljs-property">value</span> = value;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-title function_">replaceStaleEntry</span>(<span class="hljs-built_in">key</span>, value, i);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br>tab[i] = <span class="hljs-keyword">new </span><span class="hljs-class title_">Entry</span>(<span class="hljs-built_in">key</span>, value);<br><span class="hljs-type">int</span> sz = ++<span class="hljs-built_in">size</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">cleanSomeSlots</span>(i, sz) &amp;&amp; sz &gt;= threshold)<br><span class="hljs-title function_">rehash</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022</title>
    <link href="/2022/06/03/2022-1/"/>
    <url>/2022/06/03/2022-1/</url>
    
    <content type="html"><![CDATA[<p>5月31日正式离职了，17年10月入职公司，接近5年的时间。终于不用去维护系统啦，觉得轻松了好多。</p><p>今天偶然看到英国女王伊丽莎白2007年发表的圣诞致辞，其中一段她是这样说的：”随着年龄的增长，人们更能意识到变化。回忆50年前的往事，让人赞叹世道沧桑，同时也让人认识到何为永恒”。前一家公司接近5年的工作经历和别人50年比起来确实微不足道，但和5年前相比不管是自己还是世界也确实发生了好多变化。</p><p>最让人意想不到的两件事：疫情和俄乌战争。疫情已经持续快3年了，国内还不知道什么时候能结束，戴口罩和测核酸不知不觉间已经成为了生活的一部分；以前觉得战争离我们很远，其实战争的火焰一直没有熄灭，不喜欢那些虚伪的政客。</p><p>6年前，在武汉找了一段时间工作后有了转行的想法。目前来看当初的选择可能不是最好的，但无疑是正确的。不知道以后会怎么样，现在的我还想继续做5年Java开发，希望可以尽快找到满意的工作。虽然今年大环境不好，但是近几年每年的毕业生数量都创新高，往后看今年也是最好的一年。既然已经辞职，安心找工作便好了。</p><p>最近几年最开心的事是买了switch以及成为了一名光之战士，如果可以早点接触到《塞尔达传说》、《异度之刃》、《FF14》这些游戏就好了。心中一直有个疑问，为什么国家不管国内那些网页游戏，手游呢？游戏就应该实行买断或者点卡这种付费模式。</p><p>看书、学竹笛、写博客还是要坚持下去。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>延迟加载和单例</title>
    <link href="/2022/06/02/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8D%95%E4%BE%8B/"/>
    <url>/2022/06/02/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8D%95%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>双重检查锁定<br>若不使用volatile，两个线程同时访问getInstance()方法，其中一个线程正在初始化对象，<br>另一个线程检查instance不为空。<br>初始化可以理解为：<br>1.分配对象的内存空间；<br>2.初始化对象；<br>3.设置instance指向刚分配的内存地址。<br>2和3操作可能被重排序，此时初始化操作并未完成，使用volatile关键字可以禁止重排序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DoubleCheckedLocking</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Instance instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance <span class="hljs-title">getInstance</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>            synchronized (DoubleCheckedLocking.<span class="hljs-keyword">class</span>)&#123;<br>                <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>                    instance=<span class="hljs-keyword">new</span> Instance();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>基于类初始化的解决方案<br>JVM在类的初始化阶段，会执行类的初始化，期间JVM会去获取一个锁。<br>这个锁可以同步多个线程对同一个类的初始化。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstanceFactory</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Instance</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance instance=<span class="hljs-keyword">new</span> <span class="hljs-type">Instance</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance getInstance()&#123;<br>        <span class="hljs-keyword">return</span> Singleton.instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton instance=<span class="hljs-keyword">new</span> Singleton();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span>()</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">//使用枚举单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Singleton &#123;<br>    INSTANCE;<br>&#125;<br></code></pre></td></tr></table></figure><p>《Java并发编程的艺术》<br>《Effective Java》</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单例</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/02/hello-world/"/>
    <url>/2022/06/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2018年中总结</title>
    <link href="/2018/07/01/2018%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2018/07/01/2018%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>大学毕业刚好三年，从事Java工作也有一年半了，虽然中间有几个月的时间是在找工作。但从来没有像现在这样觉得时间过的如此之快。</p><p>第一份正式的工作还是亲戚帮忙找的，在一家建筑公司上班，只坚持了半年，过年的时候便辞职了。当初只和经理说了一声，也没有走正常的离职程序，现在回想起来觉得好傻。辞职之后肯定要找工作，刚好有一个同学和我情况差不多，于是和他商量年后一起去武汉找工作。住了几天旅馆之后，联系了一位房东，我们只想租一个月，结果别人说最少半年，不过最后还是找到了一家满意的。毕业之后经历了很多类似的事情，从什么都不懂，到渐渐熟悉。</p><p>房东的家在一个校区里面，校门那里刚好有一家做IT培训的机构。因为高中时视力已经近似了，一想到做编程方面的工作，要每天面对电脑，有一次我还心想这辈子是不会和计算机打交道了，可如今却成了程序员。大概一个半月之后，和我一起找工作的同学通过亲戚介绍，继续去做建筑方面的工作。而我在武汉多待了一个月，除了建筑方面的工作，也不知道能做啥，但又确实不喜欢，这次找工作算是以失败告终。后来不知为何有了学编程的想法，在网上下载了一些学习视频后便回家开始自学编程了，记得那时刚好是16年端午节。</p><p>在家学习了5个月，基本每天至少学4个小时，一边看视频，一边敲代。国庆假期结束之后继续开始找工作，用了接近两个月的时间，11月，终于在广州找到了一份Java编程的工作。本准备好好学一年就跳槽，但计划总赶不上变化，年后公司就解散了，所以说还是不能有不好的想法。</p><p>17年简单点说便是找工作，入职，离职，再入职。</p><p>一转眼已经到了2018年7月，年初的时侯给自己定的两个小目标，其中一个正在努力实现，在下次找工作时，工资一定要有所突破。最近喜欢上了看书，终于明白只有不断学习才能提高自己，看书的时候也是最充实的时候，期间也不会去想其它事情。</p><p>有时候会觉得世界上为什么有这么多不公平？但和那些在地震中失去亲人的人比起来，自己却又算幸运的了。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
